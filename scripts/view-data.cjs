const mysql = require('mysql2/promise');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MySQL
const config = {
  host: '5.129.252.214',
  port: 3306,
  user: 'gen_user',
  password: 'dfguZ_H:+>$^~5',
  database: 'default_db',
  charset: 'utf8mb4',
  ssl: {
    rejectUnauthorized: false
  }
};

async function viewData() {
  console.log('üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –≤ MySQL...');
  
  let connection;
  
  try {
    connection = await mysql.createConnection(config);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const [users] = await connection.query('SELECT * FROM users ORDER BY created_at DESC');
    console.log('\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
    users.forEach(user => {
      console.log(`  - ${user.email} (ID: ${user.id})`);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const [transactions] = await connection.query(`
      SELECT 
        t.*,
        u.email as user_email
      FROM transactions t
      LEFT JOIN users u ON t.user_id = u.id
      ORDER BY t.date DESC, t.created_at DESC
    `);
    
    console.log('\nüí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
    transactions.forEach(tx => {
      const amount = parseFloat(tx.amount).toLocaleString('ru-RU');
      const account = tx.type === 'income' ? tx.account_to : tx.account_from;
      console.log(`  ${tx.date} | ${tx.type === 'income' ? 'üìà' : 'üìâ'} ${tx.category} | ${amount} ‚ÇΩ | ${account || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      if (tx.client_name) {
        console.log(`    –ö–ª–∏–µ–Ω—Ç: ${tx.client_name}`);
      }
      if (tx.description) {
        console.log(`    –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
      }
      console.log('');
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const [stats] = await connection.query(`
      SELECT 
        type,
        SUM(amount) as total,
        COUNT(*) as count,
        AVG(amount) as avg_amount
      FROM transactions 
      GROUP BY type
    `);
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    stats.forEach(stat => {
      const total = parseFloat(stat.total).toLocaleString('ru-RU');
      const avg = parseFloat(stat.avg_amount).toLocaleString('ru-RU');
      console.log(`  ${stat.type === 'income' ? '–î–æ—Ö–æ–¥—ã' : '–†–∞—Å—Ö–æ–¥—ã'}: ${total} ‚ÇΩ (${stat.count} –æ–ø–µ—Ä–∞—Ü–∏–π, —Å—Ä–µ–¥–Ω—è—è: ${avg} ‚ÇΩ)`);
    });
    
    const totalIncome = stats.find(s => s.type === 'income')?.total || 0;
    const totalExpense = stats.find(s => s.type === 'expense')?.total || 0;
    const profit = totalIncome - totalExpense;
    
    console.log(`\nüíµ –ü—Ä–∏–±—ã–ª—å: ${profit.toLocaleString('ru-RU')} ‚ÇΩ`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
viewData().catch(console.error);
