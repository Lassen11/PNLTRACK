const mysql = require('mysql2/promise');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MySQL
const config = {
  host: '5.129.252.214',
  port: 3306,
  user: 'gen_user',
  password: 'dfguZ_H:+>$^~5',
  database: 'default_db',
  charset: 'utf8mb4',
  ssl: {
    rejectUnauthorized: false
  }
};

async function createTestData() {
  console.log('üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...');
  
  let connection;
  
  try {
    connection = await mysql.createConnection(config);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUserId = 'test-user-' + Date.now();
    const now = new Date().toISOString();
    
    await connection.query(
      'INSERT INTO users (id, email, created_at, updated_at) VALUES (?, ?, ?, ?)',
      [testUserId, 'test@pnltrack.com', now, now]
    );
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const testTransactions = [
      {
        id: 'tx-1-' + Date.now(),
        user_id: testUserId,
        date: '2024-01-15',
        type: 'income',
        category: '–ü—Ä–æ–¥–∞–∂–∏',
        subcategory: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏',
        amount: 50000,
        description: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
        client_name: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
        contract_amount: 100000,
        first_payment: 20000,
        installment_period: 4,
        lump_sum: 20000,
        company: '–°–ø–∞—Å–µ–Ω–∏–µ',
        account_to: '–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç',
        created_at: now,
        updated_at: now
      },
      {
        id: 'tx-2-' + Date.now(),
        user_id: testUserId,
        date: '2024-01-16',
        type: 'expense',
        category: '–ó–∞—Ä–ø–ª–∞—Ç–∞ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –î–∏—Ä–µ–∫—Ç–æ—Ä–∞',
        subcategory: '–û–∫–ª–∞–¥',
        amount: 30000,
        description: '–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ —è–Ω–≤–∞—Ä—å',
        company: '–°–ø–∞—Å–µ–Ω–∏–µ',
        account_from: '–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç',
        created_at: now,
        updated_at: now
      },
      {
        id: 'tx-3-' + Date.now(),
        user_id: testUserId,
        date: '2024-01-17',
        type: 'income',
        category: '–£—Å–ª—É–≥–∏',
        subcategory: '–ê–≥–µ–Ω—Ç—Å–∫–∏–µ —É—Å–ª—É–≥–∏',
        amount: 25000,
        description: '–ê–≥–µ–Ω—Ç—Å–∫–∏–µ —É—Å–ª—É–≥–∏ –ø–æ —Å–¥–µ–ª–∫–µ',
        client_name: '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á',
        company: '–°–ø–∞—Å–µ–Ω–∏–µ',
        account_to: '–ö–∞—Å—Å–∞',
        created_at: now,
        updated_at: now
      },
      {
        id: 'tx-4-' + Date.now(),
        user_id: testUserId,
        date: '2024-01-18',
        type: 'expense',
        category: '–ê—Ä–µ–Ω–¥–∞ –æ—Ñ–∏—Å–∞',
        subcategory: '–ê—Ä–µ–Ω–¥–∞',
        amount: 15000,
        description: '–ê—Ä–µ–Ω–¥–∞ –æ—Ñ–∏—Å–∞ –∑–∞ —è–Ω–≤–∞—Ä—å',
        company: '–°–ø–∞—Å–µ–Ω–∏–µ',
        account_from: '–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç',
        created_at: now,
        updated_at: now
      },
      {
        id: 'tx-5-' + Date.now(),
        user_id: testUserId,
        date: '2024-01-19',
        type: 'expense',
        category: '–†–µ–∫–ª–∞–º–∞ –ê–≤–∏—Ç–æ',
        subcategory: '–û–±—ä—è–≤–ª–µ–Ω–∏—è',
        amount: 5000,
        description: '–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ê–≤–∏—Ç–æ',
        company: '–°–ø–∞—Å–µ–Ω–∏–µ',
        account_from: '–ö–∞—Ä—Ç–∞',
        created_at: now,
        updated_at: now
      }
    ];
    
    for (const transaction of testTransactions) {
      await connection.query(
        `INSERT INTO transactions (
          id, user_id, date, type, category, subcategory, amount, description,
          client_name, contract_amount, first_payment, installment_period, lump_sum,
          company, account_from, account_to, created_at, updated_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          transaction.id,
          transaction.user_id,
          transaction.date,
          transaction.type,
          transaction.category,
          transaction.subcategory,
          transaction.amount,
          transaction.description,
          transaction.client_name,
          transaction.contract_amount,
          transaction.first_payment,
          transaction.installment_period,
          transaction.lump_sum,
          transaction.company,
          transaction.account_from,
          transaction.account_to,
          transaction.created_at,
          transaction.updated_at
        ]
      );
    }
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${testTransactions.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const [userCount] = await connection.query('SELECT COUNT(*) as count FROM users');
    const [transactionCount] = await connection.query('SELECT COUNT(*) as count FROM transactions');
    
    console.log('üìä –ò—Ç–æ–≥–∏:');
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount[0].count}`);
    console.log(`   - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactionCount[0].count}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const [stats] = await connection.query(`
      SELECT 
        type,
        SUM(amount) as total,
        COUNT(*) as count
      FROM transactions 
      WHERE user_id = ?
      GROUP BY type
    `, [testUserId]);
    
    console.log('üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º:');
    stats.forEach(stat => {
      console.log(`   - ${stat.type === 'income' ? '–î–æ—Ö–æ–¥—ã' : '–†–∞—Å—Ö–æ–¥—ã'}: ${stat.total} ‚ÇΩ (${stat.count} –æ–ø–µ—Ä–∞—Ü–∏–π)`);
    });
    
    console.log('üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
createTestData().catch(console.error);
